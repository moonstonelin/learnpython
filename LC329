//Test push

class Solution(object):
    def longestIncreasingPath(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: int
        """
        if not matrix or not matrix[0]:
            return 0

        r = len(matrix)
        c = len(matrix[0])
        ans = 1

        visited = [[0] * c for i in range(r)]
        for i in range(0, r):
            for j in range(0, c):
                ans = max(self.helper(matrix, i, j, visited), ans)

        return ans

    def helper(self, matrix, i, j, visited):
        r = len(matrix)
        c = len(matrix[0])

        if (i < 0) or (i >= r) or (j < 0) or (j >= c):
            return 0

        if visited[i][j] != 0:
            return visited[i][j]

        dir1 = [0, -1, 0, 1]
        dir2 = [-1, 0, 1, 0]
        ans = 0

        for k in range(0, 4):
            x = i + dir1[k]
            y = j + dir2[k]

            if (x >= 0) and (x < r) and (y >= 0) and (y < c) and (matrix[i][j] < matrix[x][y]):
                ans = max(ans, self.helper(matrix, x, y, visited))

        visited[i][j] = ans+1

        return ans+1


s = Solution()
matrix = [[9, 9, 4], [6, 6, 8], [2, 1, 1]]
r = s.longestIncreasingPath(matrix)
print r